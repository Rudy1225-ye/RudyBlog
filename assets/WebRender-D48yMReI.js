import{d as t,o as e,c as s,a as r}from"./index-Ch80g4Ls.js";const p="/assets/renderimg-BTR8ByKu.png",a={class:"markdown-body"},c=r('<h1>Web渲染性能</h1><p>Web渲染性能是衡量Web应用性能的重要指标之一。它涉及到浏览器如何将HTML、CSS和JavaScript代码转换为用户可以与之交互的视觉界面。Web渲染性能的好坏直接影响到用户的体验和满意度。</p><h2>1. 浏览器渲染过程</h2><ol><li><p>解析HTML生成DOM树</p></li><li><p>解析CSS生成CSSOM树</p></li><li><p>将DOM树和CSSOM树结合，生成渲染树</p></li><li><p>根据渲染树进行布局，计算每个节点的位置和大小</p></li><li><p>根据渲染树和布局信息，绘制页面</p><p><img src="'+p+'" alt="renderimg"></p></li></ol><h2>2. 性能优化</h2><ol><li><h3>避免不重要的重排：</h3><p><strong>重排（Reflow）</strong>：重排会导致浏览器重新计算页面布局，并重绘页面。避免频繁地直接操作 DOM，尽量使用批量操作或使用 <code class="">classList</code> 一次性操作样式，以减少重排的次数。</p><p><strong>如何避免</strong>：如果需要频繁更新页面元素的样式或布局，考虑使用 <code class="">DocumentFragment</code> 进行离线 DOM 操作，然后一次性将结果添加到文档中。</p></li><li><h3>尽量使用CSS来创建动画：</h3><p><strong>CSS 动画 vs. JavaScript 动画</strong>：CSS 动画通常运行在浏览器的复合线程上，避免了主线程的阻塞，性能更好。使用硬件加速属性（如 <code class="">transform</code>、<code class="">opacity</code>）可以进一步优化性能。</p><p><strong>transform 和 opacity</strong>：使用 <code class="">transform</code> 和 <code class="">opacity</code> 创建动画可以避免触发重排和重绘，因为它们不影响元素的布局。</p></li><li><h3>优化媒体资源的加载：</h3><p><strong>aspect-ratio</strong>：通过设置 <code class="">aspect-ratio</code>，浏览器可以在图片加载前预留出正确的空间，避免图片加载后导致的布局抖动和重排。</p><p>对于首屏图片一定要加上aspect-ratio，浏览器解析到aspect-ratio就会自动计算好首屏图片所需要的占位，这样就可以在未加载出图片时提前计算好布局，避免出现图片加载后的布局抖动和重排。</p><p><strong>延迟加载</strong>：使用 <code class="">loading=&quot;lazy&quot;</code> 属性为非首屏图片延迟加载，这样只有当用户滚动到图片所在的位置时才会加载，减少页面初始加载的资源占用。</p><p>对于非首屏图片或可能不会访问的图片，使用延迟加载来减少页面初始加载时间</p><p><strong>压缩图片和其他媒体资源</strong>：利用工具（如 ImageMagick、Squoosh）压缩图片，并在保证用户体验的前提下尽可能减小文件体积。</p><p>尽量在保证图片质量的情况下压缩文件大小，其他媒体资源如视频资源也是一样</p><p><strong>预加载关键资源</strong>：使用 <code class="">&lt;link rel=&quot;preload&quot;&gt;</code> 提前加载关键资源如字体，确保在页面加载时这些资源已经准备好，减少 FOUC（Flash of Unstyled Content）现象。</p><p>例如加载网络字体等影响页面的样式链接也要提前加载好，避免图片文字已经出现后再出现字体样式导影响网页性能和用户体验</p></li><li><h3>FSL强制同步布局（Forced Synchronous Layout）：</h3><p><strong>FSL 问题</strong>：当你在同一个任务中同时读取和写入 DOM 时，浏览器可能会触发强制同步布局，导致性能下降。通过将读取操作和写入操作分开，可以避免这种情况。</p><p>避免在同一个 JavaScript 任务中读取和修改 DOM 元素的尺寸或位置，否则浏览器可能会强制同步布局，造成性能问题。例如，先读取所有需要的值，再进行更新。</p></li><li><h3>针对优化Js动画</h3><p><strong>requestAnimationFrame</strong>：使用 <code class="">requestAnimationFrame</code> 可以确保动画在浏览器的重绘周期中执行，避免页面卡顿。它会在每次重绘之前调用回调函数，使动画更加流畅。</p></li><li><h3>使用Web Workers</h3><p><strong>多线程处理</strong>：Web Workers 允许你将复杂的计算任务移到主线程之外的后台线程中运行，避免阻塞 UI 线程，提高页面响应速度。</p><p><strong>适用场景</strong>：适合用于处理大量数据计算、复杂逻辑处理或长时间运行的任务，如图片处理、数据解析等。</p></li><li><h3>Web Assembly</h3><p><strong>性能优化</strong>：WebAssembly 是一种低级编程语言，可以让你在浏览器中运行接近原生速度的代码，适用于需要高性能的应用场景，如游戏引擎、视频处理器等。</p><p><strong>适用场景</strong>：特别适合处理性能瓶颈的部分，比如复杂算法、实时处理等。</p><h4>通过结合使用这些策略，可以显著提升 Web 应用的渲染性能，提供更好的用户体验。不同的应用和场景可能需要不同的优化策略，了解每种技术的适用范围和限制将帮助更有效地优化项目。</h4></li></ol>',6),n=[c],h={title:"Web渲染性能",date:"2024/08",author:"Rudy",tags:"Web性能优化",id:"1",desc:"Web渲染性能是衡量Web应用性能的重要指标之一。它涉及到浏览器如何将HTML、CSS和JavaScript代码转换为用户可以与之交互的视觉界面。Web渲染性能的好坏直接影响到用户的体验和满意度。"},S="",m=t({__name:"WebRender",setup(i,{expose:o}){return o({frontmatter:{title:"Web渲染性能",date:"2024/08",author:"Rudy",tags:"Web性能优化",id:"1",desc:"Web渲染性能是衡量Web应用性能的重要指标之一。它涉及到浏览器如何将HTML、CSS和JavaScript代码转换为用户可以与之交互的视觉界面。Web渲染性能的好坏直接影响到用户的体验和满意度。"},excerpt:void 0}),(l,d)=>(e(),s("div",a,n))}});export{m as default,S as excerpt,h as frontmatter};
